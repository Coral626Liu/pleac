 # -*- python -*-

# @@PLEAC@@_NAME
Python

# @@PLEAC@@_WEB
http://www.python.org


# @@PLEAC@@_1.0
string = r'\n'                          # two characters, \ and an n
string = r'Jon \'Maddog\' Orwant'       # literal single quotes

string = "\n"                           # a "newline" character
string = "Jon \"Maddog\" Orwant"        # literal double quotes

string = "Jon 'Maddog' Orwant"          # literal single quotes

string = '''Jon 'Maddog' Orwant'''      # literal single quotes
string = """Jon 'Maddog' Orwant"""      # literal single quotes

a = """
This is a multiline here document
terminated by triple double quote
"""

# @@PLEAC@@_1.1

s = "This is what you have"
first = s[0]                            # "T"
start = s[5:7]                          # "is"
rest  = s[13:]                          # "you have"
last  = s[-1]                           # "e"
end   = s[-4:]                          # "have"
piece = s[-8:-5]                        # "you"

# can't modify string?

# @@PLEAC@@_1.2
a = b or c

# @@PLEAC@@_1.3
v1, v2 = v2, v1

alpha, beta, production = "January March August".split()
alpha, beta, production = beta, production, alpha

# @@PLEAC@@_1.4
num = ord(char)
char = chr(num)

char = "%c" % num
print "Number %d is character %c\n" % (num, num)

from string import *
hal = "HAL"
ibm = join(map(lambda i: chr(ord(i)+1), hal), "")
print ibm


# @@PLEAC@@_1.5
for b in string:
    # do something with b

string = "an apple a day"
d = {}
for i in string: d[i] = 1
l = d.keys()
l.sort()
print "unique chars are: ", join(l)

sum = 0
for i in ascval: sum += ord(i)
print "sum is ", sum


# @@PLEAC@@_1.6
l = map(lambda i: i, string)
l.reverse()
revbytes = join(l, "")

l = split(string)
l.reverse()
revwords = join(l)

def rev_string(s):
    l = map(lambda i: i, s)
    l.reverse()
    join(l, "")

long_palindromes = filter(lambda word: len(word) > 5 and rev_string(word) == word,
             map(rstrip, open("/usr/share/dict/words").readlines()))


# @@PLEAC@@_1.7
string.expandtabs()

# @@PLEAC@@_1.8
sub("\d+", lambda i: str(2 * int(i.group(0))), "I am 17 years old")

# @@PLEAC@@_1.9
e = "bo peep".upper()
e = e.lower()
e = e.capitalize()

sub("\w+", lambda i: i.group(0).capitalize(), "thIS is a loNG liNE")

# @@PLEAC@@_1.10
"I have %d guanacos." % (n + 1)
print "I have", n+1, "guanacos."


# @@PLEAC@@_1.12
string = "Folding and splicing is the work of an editor,\n" + \
    "not a mere collection of silicon\n" + \
    "and\n" + \
    "mobile electrons!"

def wrap(str, max_size):
    all = []
    line = ""
    for l in str.split():
        if len(line+l) >= max_size:
            all += [line]
            line = ''
        line += l + ' '
    return "\n".join(all + [line])

print wrap(string, 20)


# @@PLEAC@@_1.13
string = '''Mom said, "Don't do that."'''  #"
sub("['\"]", lambda i: "\\" + i.group(0), string)
sub("[A-Z]", lambda i: "\\" + i.group(0), string)
sub("\W", lambda i: "\\" + i.group(0), "is a test!") # no function like quotemeta?


# @@PLEAC@@_1.14
string = string.strip


# @@PLEAC@@_1.15
from re import *
from string import *

def parse_csv(text):
    l = map(lambda i: join(i, ''), findall('''"([^"\\\]*(?:\\\.[^"\\\]*)*)",?|([^,]+),?|,''', text))
    if text[-1] == ",": l += ['']
    return l

line = '''XYZZY,"","O'Reilly, Inc","Wall, Larry","a \\"glug\\" bit,",5,,"Error,, Core Dumped,",''' #"

fields = parse_csv(line)
for i in range(len(fields)):
    print "%d : %s" % (i, fields[i])


# @@PLEAC@@_2.1
# (can't use String#to_i or #to_f directly)

if match("[+-]?\d+$", string):
    print 'is an integer'
else:
    print 'is not'


if match("-?(?:\d+(?:\.\d*)?|\.\d+)$", string):
    print 'is a decimal number'
else:
    print 'is not'


# @@PLEAC@@_2.2
# equal(num1, num2, accuracy) : returns true if num1 and num2 are
#   equal to accuracy number of decimal places
def equal(i, j, a):
    i - j < 10. ** -a

wage = 536                        # $5.36/hour
week = 40 * wage                  # $214.40
print "One week's wage is: $%.2f" % (week/100.0)


# @@PLEAC@@_2.3
round(num)                              # rounds to integer

a = 0.255
b = "%.2f" % a
print "Unrounded: %f\nRounded: %s" % (a, b)
print "Unrounded: %f\nRounded: %.2f" % (a, a)

from math import *

print "number\tint\tfloor\tceil"
a = [ 3.3 , 3.5 , 3.7, -3.3 ]
for n in a:
    print "% .1f\t% .1f\t% .1f\t% .1f" % (n, int(n), floor(n), ceil(n))


# @@PLEAC@@_2.5
for i in range(x,y):
    # i is set to every integer from x to y, exclusive

for i in range(x, y, 7):
    # i is set to every integer from x to y, stepsize = 7

print "Infancy is: "
for i in range(0,3):
    print i, " "
print "\n"


# @@PLEAC@@_2.7
from whrandom import *
random = uniform(x, y)


# TODO
#chars = ["A".."Z","a".."z","0".."9"].collect { |r| r.to_a }.join + %q(!@$%^&*)
#password = (1..8).collect { chars[rand(chars.size)] }.pack("C*")


# @@PLEAC@@_2.8
seed        # uses a combination of the time, the process id, and a sequence number
seed(val)   # for repeatable behaviour

